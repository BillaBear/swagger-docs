openapi: 3.0.0
info:
  version: 1.0.0
  title: BillaBear
  description: The REST API provided by BillaBear
  license:
    name: BUSL-1.1
  contact:
    name: API Support
    url: 'http://www.billabear.com/support'
    email: support@billabear.com
servers:
  - url: 'http://demo.billabear.com/v1'
tags:
  - name: Billing
paths:
  /customer:
    get:
      summary: List
      operationId: listCustomers
      description: List all customers
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/last_key'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/country'
        - $ref: '#/components/parameters/reference'
        - $ref: '#/components/parameters/external_reference'
      responses:
        '200':
          description: A paged array of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  has_more:
                    type: boolean
                  last_key:
                    type: string
                    format: uuid
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create
      operationId: createCustomer
      description: Create a customer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          $ref: '#/components/schemas/Customer'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/customer/{customerId}':
    get:
      summary: Detail
      operationId: showCustomerById
      description: Info for a specific customer
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Update
      operationId: UpdateCustomer
      description: Update a customer
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        '202':
          $ref: '#/components/schemas/Customer'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/customer/{customerId}/refund':
    get:
      summary: List Customer Refunds
      operationId: listCustomerRefund
      description: List Customer Refund
      tags:
        - Customers
        - Refunds
      parameters:
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/last_key'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: A paged array of refunds
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1refund~1%7BrefundId%7D/get/responses/200/content/application~1json/schema'
                  has_more:
                    type: boolean
                  last_key:
                    type: string
                    format: uuid
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/customer/{paymentId}/payment':
    get:
      summary: List Customer Payments
      operationId: listCustomerPayment
      description: List Customer Payment
      tags:
        - Customers
        - Payments
      parameters:
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/last_key'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: A paged array of payments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1payment/get/responses/200/content/application~1json/schema/properties/data/items'
                  has_more:
                    type: boolean
                  last_key:
                    type: string
                    format: uuid
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/customer/{customerId}/payment-details/frontend-payment-token':
    get:
      summary: Start Frontend Detail Collection
      operationId: startFrontendPaymentDetails
      description: Start frontend payment details
      tags:
        - PaymentDetails
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        '200':
          description: A paged array of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrontendToken'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Complete Frontend Detail Collection
      operationId: completeFrontendPaymentDetails
      description: Complete frontend payment details
      tags:
        - PaymentDetails
      parameters:
        - $ref: '#/components/parameters/customerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FrontendToken'
      responses:
        '201':
          type: object
          required:
            - country
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
              nullable: true
            default:
              type: boolean
            brand:
              type: string
              nullable: true
              example: visa
            last_four:
              type: string
              example: 0484
            expiry_month:
              type: string
              example: 1
            expiry_year:
              type: string
              example: 26
            created_at:
              type: string
              format: datetime
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/customer/{customerId}/subscription/start':
    post:
      summary: Start Subscription For Customer
      operationId: customerStartSubscription
      description: Start subscription for a customer
      tags:
        - Subscriptions
      parameters:
        - $ref: '#/components/parameters/customerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subscription_plan
                - price
              properties:
                subscription_plan:
                  type: string
                  format: uuid
                  description: The ID for the subscription plan to be used
                payment_details:
                  type: string
                  format: uuid
                  description: The Id for the customer's payment details to be used
                price:
                  type: string
                  format: uuid
                  description: The ID for the price to be used
                seat_numbrers:
                  type: integer
                  example: 1
      responses:
        '201':
          $ref: '#/components/schemas/Subscription'
        '406':
          description: Customer has no payment details to be used
        default:
          $ref: '#/components/responses/UnexpectedError'
  /payment:
    get:
      summary: List
      operationId: listPayment
      description: List all payment
      tags:
        - Payments
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/last_key'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: A paged array of payments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          readOnly: true
                        amount:
                          type: integer
                          example: 1000
                        currency:
                          type: string
                          example: EUR
                          description: Three-letter ISO currency code. Must be upper-case
                        external_reference:
                          type: string
                          nullable: true
                        status:
                          type: string
                          enum:
                            - pending
                            - completed
                            - disputed
                            - partially_refunded
                            - fully_refunded
                        created_at:
                          type: datetime
                        customer:
                          $ref: '#/components/schemas/Customer'
                  has_more:
                    type: boolean
                  last_key:
                    type: string
                    format: uuid
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/payment/{paymentId}/refund':
    post:
      summary: Refund Payment
      operationId: refundPayment
      description: Issue a refund for payment
      tags:
        - Payments
      parameters:
        - name: paymentId
          in: path
          required: true
          description: The id of the payment
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: integer
                  example: 1000
                currency:
                  type: string
                  example: EUR
                  description: Three-letter ISO currency code. Must be upper-case
                  nullable: true
                reason:
                  type: string
                  nullable: true
                  example: Customer thought they cancelled but had not
      responses:
        '202':
          $ref: '#/components/responses/NullResponse'
        '404':
          $ref: '#/components/responses/NullResponse'
        '406':
          $ref: '#/components/responses/NullResponse'
          description: Refund amount higher than payment
        default:
          $ref: '#/components/responses/UnexpectedError'
  /refund:
    get:
      summary: List
      operationId: listRefund
      description: List all refund
      tags:
        - Refunds
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/last_key'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: A paged array of refunds
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1refund~1%7BrefundId%7D/get/responses/200/content/application~1json/schema'
                  has_more:
                    type: boolean
                  last_key:
                    type: string
                    format: uuid
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/refund/{refundId}':
    get:
      summary: Detail
      operationId: showRefundById
      description: Info for a specific Refund
      tags:
        - Refunds
      parameters:
        - name: refundId
          in: path
          required: true
          description: The id of the refund
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    readOnly: true
                  amount:
                    type: integer
                    example: 1000
                  currency:
                    type: string
                    example: EUR
                    description: Three-letter ISO currency code. Must be upper-case
                  external_reference:
                    type: string
                    nullable: true
                  comment:
                    type: string
                    nullable: true
                    example: Customer thought they cancelled but had not
                  status:
                    type: string
                    enum:
                      - started
                      - rejected
                      - authorised
                      - issued
                  created_at:
                    type: datetime
                  payment:
                    $ref: '#/paths/~1payment/get/responses/200/content/application~1json/schema/properties/data/items'
                  customer:
                    $ref: '#/components/schemas/Customer'
                  billing_admin:
                    nullable: true
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      display_name:
                        type: string
                        example: BillingMesiter
        default:
          $ref: '#/components/responses/UnexpectedError'
  /product:
    get:
      summary: List
      operationId: listProduct
      description: List all products
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/last_key'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: A paged array of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  has_more:
                    type: boolean
                  last_key:
                    type: string
                    format: uuid
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create
      operationId: createProduct
      description: Create a product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          $ref: '#/components/responses/NullResponse'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/product/{productId}':
    get:
      summary: Detail
      operationId: showProductById
      description: Info for a specific product
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/productId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Update
      operationId: UpdateProduct
      description: Update a product
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/productId'
      responses:
        '202':
          $ref: '#/components/schemas/Product'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/product/{productId}/price':
    get:
      summary: List
      operationId: listPrice
      description: List all prices
      tags:
        - Prices
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/last_key'
      responses:
        '200':
          description: A paged array of prices for a product
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Price'
                  has_more:
                    type: boolean
                  last_key:
                    type: string
                    format: uuid
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create
      operationId: createPrice
      description: Create a price
      tags:
        - Prices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Price'
      responses:
        '201':
          $ref: '#/components/responses/NullResponse'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /subscription:
    get:
      summary: List
      operationId: listSubscriptions
      description: List all subscriptions
      tags:
        - Subscriptions
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/last_key'
      responses:
        '200':
          description: A paged array of subscriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subscription'
                  has_more:
                    type: boolean
                  last_key:
                    type: string
                    format: uuid
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/subscription/{subscriptionId}':
    get:
      summary: Detail
      operationId: showSubscriptionById
      description: Info for a specific subscription
      tags:
        - Subscriptions
      parameters:
        - name: subscriptionId
          in: path
          required: true
          description: The id of the subscription to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/subscription/{subscriptionId}/cancel':
    post:
      summary: Cancel Subscription
      operationId: cancelSubscription
      description: Info for a specific subscription
      tags:
        - Subscriptions
      parameters:
        - $ref: '#/paths/~1subscription~1%7BsubscriptionId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - when
                - refund_type
              properties:
                when:
                  type: string
                  default: end-of-run
                  enum:
                    - end-of-run
                    - instantly
                    - specific-date
                refund_type:
                  type: string
                  default: none
                  enum:
                    - none
                    - full
                    - prorate
                date:
                  type: string
                  format: date
                comment:
                  type: string
                  nullable: true
      responses:
        '201':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NullResponse'
        default:
          $ref: '#/components/responses/UnexpectedError'
components:
  parameters:
    customerId:
      name: customerId
      in: path
      required: true
      description: The id of the customer to retrieve
      schema:
        type: string
    productId:
      name: productId
      in: path
      required: true
      description: The id of the product to retrieve
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: How many items to return at one time (max 100)
      required: false
      schema:
        type: integer
        format: int32
    last_key:
      name: last_key
      in: query
      description: The key to be used in pagination to say what the last key of the previous page was
      required: false
      schema:
        type: string
    email:
      name: email
      in: query
      description: The email to search for
      required: false
      schema:
        type: string
    country:
      name: country
      in: query
      description: The country code to search for
      required: false
      schema:
        type: string
    reference:
      name: reference
      in: query
      description: The reference to search for
      required: false
      schema:
        type: string
    external_reference:
      name: external_reference
      in: query
      description: The external reference to search for
      required: false
      schema:
        type: string
    name:
      name: name
      in: query
      description: The name to search for
      required: false
      schema:
        type: string
  schemas:
    Address:
      $red: ./Address.yaml
    Customer:
      type: object
      required:
        - email
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          example: iain.cambridge@example.org
        reference:
          type: string
          example: internal-id
        external_reference:
          type: string
        address:
          type: Address
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    FrontendToken:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: dummy-token-here
    PaymentDetails:
      $red: ./PaymentDetails.yaml
    Price:
      type: object
      required:
        - amount
        - currency
        - recurring
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        amount:
          type: integer
          example: 1000
        currency:
          type: string
          example: EUR
          description: Three-letter ISO currency code. Must be upper-case
        external_reference:
          type: string
          nullable: true
        recurring:
          type: boolean
          example: false
        schedule:
          type: string
          enum:
            - week
            - month
            - year
          nullable: true
          description: Required if recurring is true
        including_tax:
          type: boolean
          nullable: true
          description: If the price is including tax. If false tax will be added on top of the price.
        public:
          type: boolean
          nullable: true
    Product:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        external_reference:
          type: string
          nullable: true
          description: The reference given by the payment provider
    Subscription:
      type: object
      properties:
        id:
          type: string
          format: uuid
        schedule:
          type: string
          example: month
        created_at:
          type: datetime
        updated_at:
          type: datetime
        ended_at:
          type: datetime
        valid_until:
          type: datetime
        main_external_reference:
          type: string
        child_external_reference:
          type: string
        price:
          type: Price
        subscription_plan:
          type: SubscriptionPlan
    SubscriptionPlan:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Plany McPlanFace
  responses:
    UnexpectedError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NullResponse:
      description: Null response
